version: "3"

services:
  #db:
    #image: mysql:8.0  # Mac에서 MySQL 8.0 사용
    #container_name: mysql-container #compose up을 통해 생성될 mysql 컨테이너 이름 지정
    #environment:
      #MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}  #.env 파일에서 자동으로 값을 읽음
      #MYSQL_DATABASE: instagram  # Docker에서 MySQL 컨테이너를 처음 생성하면 기본적으로 아무 데이터베이스도 생성되어 있지 않아서 만들어줘야됨
    #volumes:
      #- dbdata:/var/lib/mysql
    #ports:
      #- "3307:3306"
    #restart: always
    #healthcheck:
      #test: [ "CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -p${MYSQL_ROOT_PASSWORD} --silent" ]
      #interval: 10s
      #retries: 5

  web:
    container_name: instagram-container
    platform: linux/amd64
    build: .   # 현재 디렉토리에 있는 Dockerfile을 사용하여 이미지를 빌드
    ports:
      - "8080:8080"
    #depends_on:  # 컨테이너 간의 실행 순서를 지정하는 데 사용. db 컨테이너가 먼저 실행한 뒤 instagram-container가 실행되게 한다.(rds 사용하면 db 컨테이너 사용할 필요 없어서 삭제)
      #db:
        #condition: service_healthy
    environment:
      #mysql_host: db  # MySQL서버 컨테이너의 호스트 이름-> web서비스가 db서비스에 접근할 수 있도록 설정 (Docker Compose를 사용하면 동일한 네트워크 내에서 컨테이너 이름을 호스트 이름으로 사용하여 서로 접근함)
      SPRING_DATASOURCE_URL : ${RDS_URL}
      SPRING_DATASOURCE_USERNAME: ${RDS_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${RDS_PASSWORD}
    env_file:
      - .env   #.env파일의 환경변수를 docker compose가 읽어 컨테이너에 전달
    restart: always
    volumes:
      - app:/app

volumes:
  dbdata:
  app: